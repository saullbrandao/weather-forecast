{"version":3,"sources":["components/LocationInput.js","services/geocodingApi.js","services/weatherApi.js","components/WeatherCard.js","components/WeatherCardList.js","styles/globals.js","components/Header.js","components/CityName.js","components/App.js","index.js"],"names":["TextInput","styled","input","LocationInput","handleLocationChange","type","onKeyPress","event","key","target","value","placeholder","geocodingApi","axios","create","baseURL","params","process","weatherApi","units","exclude","appid","Card","div","CurrentDayCard","Temperature","p","Icon","img","Humidity","WeekDay","h3","WeatherCard","dailyWeather","current","iconURL","weather","icon","formatedDate","Date","dt","toDateString","slice","Math","floor","temp","src","humidity","day","CardList","WeatherCardList","daily","map","index","createGlobalStyle","Header","h1","CityName","h2","Container","App","useState","setWeather","usePosition","latitude","longitude","error","useEffect","a","get","q","response","setLocation","location","city","data","results","components","handleCityName","console","log","handleWeather","lat","lon","id","newCity","then","geometry","lng","toUpperCase","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5b314034.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst TextInput = styled.input`\n    display: flex;\n    justify-self: center;\n    width: 45em;\n    padding: 0.5em;\n    text-align: center;\n    font-size: 1em;\n    border-radius: 1em;\n    border: 2px solid #2E8BC0;\n\n    :focus {\n        outline: none;\n        ::placeholder {\n            color: transparent\n        }\n    }\n\n    @media(max-width: 970px) {\n        width: 100%;\n    }\n\n    @media(max-width: 530px) {\n        width: 100%;\n    }\n`\n\nconst LocationInput = ({ handleLocationChange }) => {\n    const handleKeyPress = event => {\n        if (event.key === 'Enter' && event.target.value) {\n            handleLocationChange(event.target.value)\n            event.target.value = ''\n        }\n    }\n\n    return (\n        <TextInput type=\"text\"\n            onKeyPress={handleKeyPress}\n            placeholder=\"Enter City Name\"\n        />\n    )\n}\n\nexport default LocationInput","import axios from \"axios\";\n\nconst geocodingApi = axios.create({\n    baseURL: 'https://api.opencagedata.com',\n    params: {\n        key: process.env.REACT_APP_GEOCODING_API_KEY\n    }\n})\n\nexport default geocodingApi","import axios from \"axios\";\n\nconst weatherApi = axios.create({\n    baseURL: 'https://api.openweathermap.org',\n    params: {\n        units: 'metric',\n        exclude: 'minutely,hourly,alerts',\n        appid: process.env.REACT_APP_WEATHER_API_KEY\n    }\n})\n\nexport default weatherApi","import styled from 'styled-components'\n\nconst Card = styled.div`\n    display: flex;\n    flex-direction: column;\n    padding: 0.5em 0 0.5em 0;\n    border-radius: 3px;\n    align-items: center;\n    background-color:#2E8BC0;\n    width: 4em;\n    border: 1px solid #fdfdfd;\n    font-size: 2em;\n\n    @media(max-width: 970px) {\n        display: grid;\n        grid-template-columns: 1fr 1fr 1fr 1fr;\n        width: 100%;\n        justify-items: center;\n    }\n\n    @media(max-width: 530px) {\n        font-size: 1.5em ;\n        grid-template-columns: 1fr 1fr 1fr; \n    }\n\n    \n`\n\nconst CurrentDayCard = styled(Card)`\n    background-color: #145DA0;\n`\n\nconst Temperature = styled.p`\n    font-weight: bold;\n\n    sup {\n        font-size: 1rem;\n    }\n    \n`\n\nconst Icon = styled.img`\n`\n\nconst Humidity = styled.p`\n    font-size: 1rem;\n    font-weight:bold;\n\n    @media(max-width: 530px) {\n        display: none;\n    }\n`\n\nconst WeekDay = styled.h3`\n\n`\n\n\nconst WeatherCard = ({ dailyWeather, current }) => {\n    const iconURL = `https://openweathermap.org/img/w/${dailyWeather.weather[0].icon}.png`\n\n    if (dailyWeather) {\n        const date = new Date(dailyWeather.dt * 1000)\n        const formatedDate = date.toDateString().slice(0, 4)\n        return (\n            current ? <CurrentDayCard>\n                <WeekDay>Today</WeekDay>\n                <Temperature>{Math.floor(dailyWeather.temp)}<sup>°C</sup> </Temperature>\n                <Icon src={iconURL} />\n                <Humidity>\n                    Humidity {`${dailyWeather.humidity}%`}\n                </Humidity>\n\n            </CurrentDayCard>\n                : <Card>\n                    <WeekDay>{formatedDate}</WeekDay>\n                    <Temperature>{Math.floor(dailyWeather.temp.day)}<sup>°C</sup> </Temperature>\n\n                    <Icon src={iconURL} />\n                    <Humidity>\n                        Humidity {`${dailyWeather.humidity}%`}\n                    </Humidity>\n                </Card>\n        )\n    }\n\n    return <p>Loading</p>\n}\n\nexport default WeatherCard","import WeatherCard from './WeatherCard'\nimport styled from 'styled-components'\n\nconst CardList = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    width: 100%;\n    gap: 0.5em;\n    \n    @media(max-width: 970px) {\n        flex-direction: column;\n        justify-content: start;\n        align-items: start;\n        gap: 0.1px;\n    }\n`\n\nconst WeatherCardList = ({ weather }) => {\n    return (\n        <CardList>\n            {weather.daily ? weather.daily.map((day, index) => {\n                return index < 7 ? <WeatherCard key={index} dailyWeather={index === 0 ? weather.current : day} current={index === 0 ? true : false} /> : null\n            }) : null}\n        </CardList>\n    )\n}\n\nexport default WeatherCardList","import { createGlobalStyle } from \"styled-components\";\n\nexport default createGlobalStyle`\n    * {\n        margin: 0;\n        padding: 0;\n        outline: 0;\n        box-sizing: border-box;\n    }\n    \n    body {\n        -webkit-font-smoothing: antialiased !important;\n        background-color: #0C2D48;\n        \n    }\n    \n    body html #root {\n        height: 100%;\n    }\n`","import styled from \"styled-components\";\n\nconst Header = styled.h1`\n  font-size: 3rem;\n  text-align: center;\n`\n\nexport default Header","import styled from \"styled-components\"\n\nconst CityName = styled.h2`\n  text-align: center;\n  font-size: 2rem;\n`\n\nexport default CityName","import React, { useEffect, useState } from 'react'\nimport { usePosition } from 'use-position'\nimport LocationInput from './LocationInput'\nimport geocodingApi from '../services/geocodingApi'\nimport weatherApi from '../services/weatherApi'\nimport WeatherCardList from './WeatherCardList'\nimport GlobalStyle from '../styles/globals'\nimport styled from 'styled-components'\nimport Header from './Header'\nimport CityName from './CityName'\n\nconst Container = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 1em;\n    color: #fdfdfd;\n    gap: 5em;\n    height: 100%;\n\n    @media(max-width: 970px) {\n        gap: 3em;\n    }\n`\nconst App = () => {\n  const [weather, setWeather] = useState({})\n  const { latitude, longitude, error } = usePosition()\n\n  useEffect(() => {\n\n    const handleCityName = async () => {\n      const response = await geocodingApi.get('geocode/v1/json', {\n        params: {\n          q: `${latitude},${longitude}`\n        }\n      })\n      setLocation(location => {\n        return { ...location, city: response.data.results[0].components.city }\n      })\n    }\n\n    if (latitude && longitude && !error) {\n      handleCityName()\n\n      setLocation(location => {\n        return {\n          ...location,\n          latitude,\n          longitude,\n        }\n      })\n    } else {\n      console.log('error')\n    }\n  }, [latitude, longitude, error])\n\n  const [location, setLocation] = useState({})\n\n\n\n  useEffect(() => {\n    const handleWeather = async () => {\n      const response = await weatherApi.get('data/2.5/onecall', {\n        params: {\n          lat: location.latitude,\n          lon: location.longitude,\n        }\n      })\n      setWeather(response.data)\n    }\n    if (location.latitude && location.longitude) {\n      handleWeather()\n    }\n\n  }, [location.latitude, location.longitude])\n\n  const handleLocationChange = (newCity) => {\n    geocodingApi.get('geocode/v1/json', {\n      params: {\n        q: newCity\n      }\n    }).then(response => {\n      const { lat, lng } = response.data.results[0].geometry\n      setLocation({\n        city: newCity,\n        latitude: lat,\n        longitude: lng\n      })\n    })\n  }\n\n  return (\n    <Container id=\"app\">\n      <Header>Weather Forecast</Header>\n      <LocationInput handleLocationChange={handleLocationChange} />\n      <CityName>{location.city && `${location.city.toUpperCase()}`}</CityName>\n      <WeatherCardList weather={weather} />\n      <GlobalStyle />\n    </Container>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}